Classifier: RidgeClassifierCV(alphas=[  1.00000e-02   1.00000e-01   1.00000e+00   1.20000e+01],
         class_weight=None, cv=None, fit_intercept=True, loss_func=None,
         normalize=False, score_func=None)
Loading data from neurosynth...
[] 5%[#] 10%[#] 15%[##] 20%[##] 25%[###] 30%[###] 35%[####] 40%[####] 45%[#####] 50%[#####] 55%[######] 60%[######] 65%[#######] 70%[#######] 75%[########] 80%[########] 85%[#########] 90%[#########] 95%[##########] 100%
Classifying...
[] 1%[] 2%[] 3%[] 4%[] 5%[] 6%[] 7%[] 8%[] 9%[#] 10%[#] 11%[#] 12%[#] 13%[#] 14%[#] 15%[#] 16%[#] 17%[#] 18%[#] 19%[##] 20%[##] 21%[##] 22%[##] 23%[##] 24%[##] 25%[##] 26%[##] 27%[##] 28%[##] 29%[###] 30%[###] 31%[###] 32%[###] 33%[###] 34%[###] 35%[###] 36%[###] 37%[###] 38%[###] 39%[####] 40%[####] 41%[####] 42%[####] 43%[####] 44%[####] 45%[####] 46%[####] 47%[####] 48%[####] 49%[#####] 50%[#####] 51%[#####] 52%[#####] 53%[#####] 54%[#####] 55%[#####] 56%[#####] 57%[#####] 58%[#####] 59%[######] 60%[######] 61%[######] 62%[######] 63%[######] 64%[######] 65%[######] 66%[######] 67%[######] 68%[######] 69%[#######] 70%[#######] 71%[#######] 72%[#######] 73%[#######] 74%[#######] 75%[#######] 76%[#######] 77%[#######] 78%[#######] 79%[########] 80%[########] 81%[########] 82%[########] 83%[########] 84%[########] 85%[########] 86%[########] 87%[########] 88%[########] 89%[#########] 90%[#########] 91%[#########] 92%[#########] 93%[#########] 94%[#########] 95%[#########] 96%[#########] 97%[#########] 98%[#########] 99%[##########] 100%
Filename: base/multipleclassifier.py

Line #    Mem usage    Increment   Line Contents
================================================
   169    982.6 MiB      0.0 MiB   
   170                                 def classify(self, features=None, scoring='accuracy', X_threshold=None, feat_select=None, processes=1, class_weight = 'auto', dummy = None):
   171                             
   172   1281.0 MiB    298.4 MiB           self.load_data(features, X_threshold)
   173                             
   174   1281.4 MiB      0.3 MiB           self.initalize_containers(features, feat_select, dummy)
   175                             
   176   1281.4 MiB      0.0 MiB           print "Classifying..."
   177   1281.4 MiB      0.0 MiB           pb = tools.ProgressBar(len(list(self.mask_pairs)), start=True)
   178                             
   179   1281.4 MiB      0.0 MiB           if processes > 1:
   180                                         pool = Pool(processes=processes)
   181                                     else:
   182   1281.4 MiB      0.0 MiB               pool = itertools
   183                             
   184   1281.4 MiB      0.0 MiB           try:
   185   1281.4 MiB      0.0 MiB               filename = self.c_data.filename
   186                             
   187   1281.4 MiB      0.0 MiB               for output in pool.imap(
   188   1281.4 MiB      0.0 MiB                   classify_parallel, itertools.izip(
   189   1281.4 MiB      0.0 MiB                       itertools.repeat((self.classifier, self.param_grid, scoring, filename, feat_select, self.mask_num, class_weight)), 
   190   1413.0 MiB    131.6 MiB                       self.mask_pairs)):
   191                             
   192   1413.0 MiB      0.0 MiB                   index = output['index']
   193   1413.0 MiB      0.0 MiB                   self.class_score[index] = output['score']
   194   1413.0 MiB      0.0 MiB                   self.fit_clfs[index] = output['clf']
   195                             
   196   1413.0 MiB      0.0 MiB                   if self.param_grid:  # Just get the FIs if you used a grid
   197                                                 try:
   198                                                     self.feature_importances[index] = self.fit_clfs[
   199                                                         index].best_estimator_.coef_[0]
   200                                                 except AttributeError:
   201                                                     try:
   202                                                         self.feature_importances[index] = self.fit_clfs[
   203                                                             index].best_estimator.feature_importances_
   204                                                     except AttributeError:
   205                                                         pass
   206                                             else:
   207   1413.0 MiB      0.0 MiB                       try:
   208                                                     self.feature_importances[
   209   1413.0 MiB      0.0 MiB                               index] = self.fit_clfs[index].clf.coef_[0]
   210                                                 except AttributeError:
   211                                                     try:
   212                                                         self.feature_importances[index] = self.fit_clfs[
   213                                                             index].clf.feature_importances_
   214                                                     except AttributeError:
   215                                                         pass
   216                             
   217   1413.0 MiB      0.0 MiB                   if feat_select:
   218                                                 self.features_selected[index] = output['features_selected']
   219                             
   220   1413.0 MiB      0.0 MiB                   if dummy is not None:
   221   1413.0 MiB      0.0 MiB                       X, y = self.c_data[index]
   222   1413.0 MiB      0.0 MiB                       output = classify.classify(X, y, classifier=DummyClassifier(strategy=dummy), cross_val='4-Fold',
   223   1413.3 MiB      0.2 MiB                           class_weight=class_weight, scoring=scoring, feat_select=feat_select)
   224                             
   225   1413.3 MiB      0.0 MiB                       self.dummy_score[index] = output['score']
   226                             
   227   1413.3 MiB      0.0 MiB                   pb.next()
   228                                     finally:
   229   1326.5 MiB    -86.7 MiB               if processes > 1:
   230                                             pool.close()
   231                                             pool.join()
   232                             
   233   1326.5 MiB      0.0 MiB           if dummy is None:
   234                                         self.final_score = self.class_score
   235                                     else:
   236   1326.5 MiB      0.0 MiB               self.final_score = self.class_score - self.dummy_score


../results/ns_20_RidgeClassifierCV_TEST_DM_abstract_topics_t_0.1/
_____________________
Descriptive results:
Overall accuracy: 0.0958843677332
Classifier averages: 0.771492267303
Dummy averages: 0.675607899569
Correlation between dummy and clf: (0.90569150576771096, 2.0444959708141513e-150)
Mask averages: [0.054, 0.108, 0.096, 0.147, 0.125, 0.178, 0.083, 0.119, -0.01, 0.104, 0.07, 0.101, 0.018, 0.104, 0.123, 0.031, 0.115, 0.107, 0.118, 0.128]
_____________________

Classifier: RidgeClassifierCV(alphas=[  1.00000e-02   1.00000e-01   1.00000e+00   1.20000e+01],
         class_weight=None, cv=None, fit_intercept=True, loss_func=None,
         normalize=False, score_func=None)
Loading data from neurosynth...
